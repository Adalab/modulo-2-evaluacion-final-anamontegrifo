{"version":3,"sources":["01-start.js","02-fetch.js","03-found-list.js","04-favourites.js","05-localStorage.js","06-deleteFav.js","main.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA","file":"main.js","sourcesContent":["'use strict';\n\n//Variables para hacer referencia a elementos de HTML\nconst form = document.querySelector('.form');\nconst inputSearch = document.querySelector('.js-inputSearch');\nconst btnSearch = document.querySelector('.js-btnSearch');\nconst listContainer = document.querySelector('.found-list');\nconst favContainer = document.querySelector('.js-favlist');\nconst favSection = document.querySelector('.js-fav');\n\n//Imagen por defecto\nconst defaultImage =\n\t'https://via.placeholder.com/210x295/ffffff/666666/?text=TV';\n\n//Variables para guardar los arrays\nlet series = [];\nlet favourites = [];\n\n//Para recuperar los datos guardados el localStorage\nif (localStorage.getItem('favourites') !== null) {\n\tgetLS();\n}\n\n//Función para evitar que el formulario se ejecute\nfunction preventDefault(event) {\n\tevent.preventDefault();\n}\nform.addEventListener('submit', preventDefault);\n","//Función para completar la url con la búsqueda en el campo input.\nfunction completeUrl() {\n\tlet itemSearch = inputSearch.value;\n\tlet url = `//api.tvmaze.com/search/shows?q=${itemSearch}`;\n\treturn url;\n}\n\n//Función que engloba la consulta en la API, el guardado de resultado en el array \"series\" y el pintado en pantalla del resultado.\nfunction getTheSearchResult() {\n\tlet url = completeUrl();\n\n\t//Función fetch para hacer la petición de información a la API sobre la búsqueda deseada (url) y guardar los datos devueltos en el array \"series\".\n\tfetch(url)\n\t\t.then((response) => response.json())\n\t\t.then((data) => {\n\t\t\tseries = data;\n\n\t\t\t///Función para añadir, con DOM Avanzado, la estructura y contenido en HTML del listado de series tras la búsqueda.\n\t\t\taddCards();\n\t\t});\n}\n\n//Listener sobre el botón \"Buscar\", que ejecuta la función anterior.\nbtnSearch.addEventListener('click', getTheSearchResult);\n","//Función que usa un método \"find\" y nos devuelve true o false si el id del elemento es encontrado en el array \"favourites\".\nfunction isFavourite(card) {\n\tconst favFound = favourites.find((fav) => {\n\t\treturn fav.show.id === card.show.id;\n\t});\n\tif (favFound === undefined) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\n//Función para añadir, con DOM Avanzado, la estructura y contenido en HTML del listado de series tras la búsqueda. Se ejecuta un bucle para que imprima cada uno de los elementos del array.\nfunction addCards() {\n\tlet favClass = '';\n\tlistContainer.innerHTML = '';\n\t//Bucle para añadir contenido a la estructura de la sección de búsqueda.\n\tfor (const card of series) {\n\t\t//Añadimos la clase correspondiente si el elemento está marcado como favorito o no\n\t\tconst isFav = isFavourite(card);\n\n\t\tif (isFav) {\n\t\t\tfavClass = 'favourite';\n\t\t} else {\n\t\t\tfavClass = 'estandar';\n\t\t}\n\t\t//Añadimos la estructura del HTML por cada elemento que pasa por el bucle\n\t\tlet newCard = document.createElement('div');\n\t\tnewCard.classList.add('found-list__card', 'js-foundCard', `${favClass}`);\n\t\tnewCard.id = card.show.id;\n\t\tlet imageCard = document.createElement('img');\n\n\t\t//En el caso de que no haya imagen en el array, introducimos una imagen por defecto\n\t\tif (card.show.image === null) {\n\t\t\timageCard.src =\n\t\t\t\t'https://via.placeholder.com/210x295/ffffff/666666/?text=TV';\n\t\t} else {\n\t\t\timageCard.src = card.show.image.medium;\n\t\t}\n\n\t\timageCard.setAttribute('class', 'found-list__image');\n\t\tlet titleCard = document.createElement('h2');\n\t\ttitleCard.setAttribute('class', 'found-list__title');\n\t\tlet titleContent = document.createTextNode(card.show.name);\n\t\ttitleCard.appendChild(titleContent);\n\t\tnewCard.appendChild(imageCard);\n\t\tlistContainer.appendChild(newCard);\n\t\tnewCard.appendChild(titleCard);\n\t\tlistContainer.appendChild(newCard);\n\t}\n\n\t//Función que añade o saca las series \"clickadas\" del listado de favoritos\n\tlistenToTheCards();\n}\n\n//Función listener sobre cada uno de los <div> de series que se generar en el bucle. Ejecuta la función para añadir o sacar del array de favoritos los elementos \"clickados\".\nfunction listenToTheCards() {\n\tconst listenedCards = document.querySelectorAll('.js-foundCard');\n\tfor (const eachCard of listenedCards) {\n\t\teachCard.addEventListener('click', handleFavCards);\n\t}\n}\n","//Función para añadir o sacar del array de favoritos los elementos \"clickados\". La llamamos desde un listener en un bucle que afecta a cada una de las tarjetas de series.\nfunction handleFavCards(event) {\n\t//Función que nos devuelve el primer elemento (objeto) del array series que coincide con el id del elemento \"clickado\".\n\tconst selectedCardId = parseInt(event.currentTarget.id);\n\tconst clickedCard = series.find((card) => {\n\t\treturn card.show.id === selectedCardId;\n\t});\n\n\t//Función con la que detectamos si el elemento \"clickado\" ya está incluido en el array de favoritos a través de su posición en el array y los añadimos o sacamos.\n\tconst alreadyExist = favourites.findIndex((index) => {\n\t\treturn index.show.id === selectedCardId;\n\t});\n\n\tif (alreadyExist === -1) {\n\t\tfavourites.push(clickedCard);\n\t} else {\n\t\tfavourites.splice(alreadyExist, 1);\n\t}\n\t//Guardamos en local los datos del array de favoritos\n\tsetLS();\n\t//Añadimos la estructura y contenido en HTML de la sección de series\n\taddCards();\n\t//Añadimos la estructura y contenido en HTML de la sección de favoritos\n\tAddContentFavCards();\n}\n\n//Función para borrar del array de favoritos desde los iconos \"x\"\nfunction deleteFavIcons(event) {\n\t//Función que nos devuelve el primer elemento (objeto) del array \"favourites\" que coincide con el id del icono \"x\" \"clickado\".\n\tconst selectedIconId = parseInt(event.currentTarget.id);\n\tconst clickedIcon = favourites.find((card) => {\n\t\treturn card.show.id === selectedIconId;\n\t});\n\n\t//Función con la que detectamos si el icono \"x\" \"clickado\" ya está incluido en el array de favoritos y lo sacamos.\n\tconst alreadyExist = favourites.findIndex((index) => {\n\t\treturn index.show.id === selectedIconId;\n\t});\n\n\tif (alreadyExist !== -1) {\n\t\tfavourites.splice(alreadyExist, 1);\n\t}\n\n\t//Guardamos en local los datos del array de favoritos\n\tsetLS();\n\t//Añadimos la estructura y contenido en HTML de la sección de series\n\taddCards();\n\t//Añadimos la estructura y contenido en HTML de la sección de favoritos\n\tAddContentFavCards();\n}\n\n//Función con la que añadimos la estructura y contenido en HTML de la sección de favoritos\nfunction AddContentFavCards() {\n\tfavSection.innerHTML = '';\n\n\t//Añadimos la estructura y cabecera\n\tlet newList = document.createElement('ul');\n\tnewList.classList.add('fav__menu', 'fav-list', 'js-favlist');\n\n\tlet newDiv = document.createElement('div');\n\tnewDiv.classList.add('fav__header');\n\n\tlet newH = document.createElement('h2');\n\tnewH.classList.add('fav__headline');\n\tlet hContent = document.createTextNode('Tus series favoritas');\n\tnewH.appendChild(hContent);\n\n\tlet newButton = document.createElement('button');\n\tnewButton.classList.add('fav__reset', 'js-reset');\n\tlet buttonContent = document.createTextNode('Reset');\n\tnewButton.appendChild(buttonContent);\n\n\tnewDiv.appendChild(newH);\n\tnewDiv.appendChild(newButton);\n\tnewList.appendChild(newDiv);\n\n\t//Añadimos el contenido de cada uno de los elementos en HTML que entran en el bucle\n\tfor (const card of favourites) {\n\t\tlet newCard = document.createElement('li');\n\t\tnewCard.classList.add('fav-list__card', 'js-favCard');\n\t\tnewCard.id = card.show.id;\n\n\t\tlet imageCard = document.createElement('img');\n\t\tif (card.show.image === null) {\n\t\t\timageCard.src =\n\t\t\t\t'https://via.placeholder.com/210x295/ffffff/666666/?text=TV';\n\t\t} else {\n\t\t\timageCard.src = card.show.image.medium;\n\t\t}\n\t\timageCard.setAttribute('class', 'fav-list__image');\n\n\t\tlet titleCard = document.createElement('h2');\n\t\ttitleCard.setAttribute('class', 'fav-list__title');\n\t\tlet titleContent = document.createTextNode(card.show.name);\n\t\ttitleCard.appendChild(titleContent);\n\n\t\tlet iconCard = document.createElement('i');\n\t\ticonCard.setAttribute(\n\t\t\t'class',\n\t\t\t'fas fa-times-circle fav-list__icon js-icon'\n\t\t);\n\t\ticonCard.id = card.show.id;\n\t\tnewCard.appendChild(imageCard);\n\t\tnewCard.appendChild(titleCard);\n\t\tnewCard.appendChild(iconCard);\n\n\t\tnewList.appendChild(newCard);\n\t\tfavSection.appendChild(newList);\n\n\t\t//Listener del reset, porque el elemento botón reset se ha creado dentro de esta función\n\t\tconst resetBtn = document.querySelector('.js-reset');\n\t\tresetBtn.addEventListener('click', reset);\n\n\t\t//Listener de borrar favoritos en los iconos, porque los iconos también se han generado dentro de esta función.\n\t\tconst favIcons = document.querySelectorAll('.js-icon');\n\t\tfor (const icon of favIcons) {\n\t\t\ticon.addEventListener('click', deleteFavIcons);\n\t\t}\n\t}\n\t//Llamamos a la función que añade o saca las series \"clickadas\" del listado de favoritos\n\tlistenToTheCards();\n}\n","//Función para guardar en local los datos del array de favoritos\nfunction setLS() {\n\tlocalStorage.setItem('favourites', JSON.stringify(favourites));\n}\n\n//Función para recuperar al array de favoritos los datos guardados en local.\nfunction getLS() {\n\tfavourites = JSON.parse(localStorage.getItem('favourites'));\n\t//Función con la que mantenemos el HTML de la sección de favoritos\n\tAddContentFavCards();\n}\n","//Reseteamos la sección de favoritos vaciando la sección, vaciando el array y ejecutando la función principal que añade listado y clases de las series.\nfunction reset() {\n\tfavourites = [];\n\tfavSection.innerHTML = '';\n\taddCards();\n\tsetLS();\n}\n",""]}